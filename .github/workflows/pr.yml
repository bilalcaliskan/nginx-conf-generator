---
name: PR
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Lint code
        run: make -s lint
      - name: Clean downloaded binaries
        run: make -s clean

  fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Run fmt
        run: make -s fmt
      - name: Clean downloaded binaries
        run: make -s clean

  test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Install Nginx
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt update
            sudo apt install nginx
            sudo nginx
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install nginx
            sudo ln -s /usr/local/etc/nginx /etc/nginx
            sudo nginx
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi
        shell: bash
      - name: Test
        run: make -s test

  codeql:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Install Nginx
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt update
            sudo apt install nginx
            sudo nginx
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install nginx
            sudo ln -s /usr/local/etc/nginx /etc/nginx
            sudo nginx
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi
        shell: bash
      - name: Coverage Test
        run: make -s test-with-coverage
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dproject.settings=build/ci/sonar-project.properties
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Test
        run: make -s build
